// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EnhancedSmartContract {
    address private owner;
    uint256 private data;
    uint256[] private dataList;

    event DataUpdated(uint256 newData);
    event DataAppended(uint256 newData);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor(address initialOwner, uint256 initialData) {
        owner = initialOwner;
        data = initialData;
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data, "New data must be different from current data");
        data = newData;
        emit DataUpdated(newData);
    }

    function getData() external view returns (uint256) {
        return data;
    }

    function appendData(uint256 newData) external onlyOwner {
        dataList.push(newData);
        emit DataAppended(newData);
    }

    function getDataList() external view returns (uint256[] memory) {
        return dataList;
    }
}
